<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="ContactResource1.Text" xml:space="preserve">
    <value>Still can't find?</value>
  </data>
  <data name="ContactResource2.Text" xml:space="preserve">
    <value>Contact Us ....</value>
  </data>
  <data name="lblAccessResource1.Text" xml:space="preserve">
    <value>Access rights</value>
  </data>
  <data name="lblAccessResource2.Text" xml:space="preserve">
    <value>Cameleo Photo wish to specify that its advertisers will not at any time be allowed to access your confidential information. Furthermore, Cameleo Photo does not sell user lists. You have the choice to modify your personal information under the section My Profile in your account.
</value>
  </data>
  <data name="lblCookiesResource1.Text" xml:space="preserve">
    <value>Cookies and log files</value>
  </data>
  <data name="lblCookiesResource2.Text" xml:space="preserve">
    <value>We collect certain non personal information using log files and cookies : 
&lt;ul&gt;
&lt;li&gt;Visited pages&lt;/li&gt;
&lt;li&gt;Connection date and time&lt;/li&gt;&lt;/ul&gt;

We use the collected information for the following purposes : 
&lt;ul&gt;
&lt;li&gt;Customer service&lt;/li&gt;
&lt;li&gt;Order tracking&lt;/li&gt;
&lt;li&gt;Statistics&lt;/li&gt;&lt;/ul&gt;</value>
  </data>
  <data name="lblPersonalInfoResource1.Text" xml:space="preserve">
    <value>Collection of personal information</value>
  </data>
  <data name="lblPersonalInfoResource2.Text" xml:space="preserve">
    <value>During the order process, we may collect the following personal information : &lt;br&gt;&lt;ul&gt;
&lt;li&gt;Last name&lt;/li&gt;
&lt;li&gt;First name&lt;/li&gt;
&lt;li&gt;Shipping address&lt;/li&gt;
&lt;li&gt;Postal/zip code&lt;/li&gt;
&lt;li&gt;email address&lt;/li&gt;
&lt;li&gt;Phone/fax number&lt;/li&gt;&lt;/ul&gt;
We may also ask for your credit card number during the payment process but note that Cameleo never keep credit card information. </value>
  </data>
  <data name="lblPrivacyHeaderResource1.Text" xml:space="preserve">
    <value>Confidentiality policy</value>
  </data>
  <data name="lblPrivacyHeaderResource2.Text" xml:space="preserve">
    <value>Cameleo Photo tries to insure the protection of the information transmitted through the internet as well as respecting privacy and thus, rigorously controls the way by which personal information is used and transmitted.</value>
  </data>
  <data name="lblSecurityResource1.Text" xml:space="preserve">
    <value>Protection of personal information</value>
  </data>
  <data name="lblSecurityResource2.Text" xml:space="preserve">
    <value>Collected information is kept in a secure environment. Only those employees or representatives dully authorised by Cameleo Photo can access your information, but solely has governed by their position.
CameleoPhoto has implemented state-of-the-art security measures in order to protect you against loss or unauthorised use of customer information that is in our possession : 
&lt;ul&gt;
&lt;li&gt;Secure Sockets Layer or SSL&lt;/li&gt;
&lt;li&gt;Use of login / password&lt;/li&gt;
&lt;li&gt;Use of firewalls&lt;/li&gt;&lt;/ul&gt;
However, no security mechanism is perfect and you must be aware that you are always at some level of risk that personal information transmitted to Cameleo Photo may be disclosed without fault on the part of Cameleo Photo and without your consent. Cameleo Photo declines all responsibility regarding forwarded confidential information, except in case of negligence on the part of Cameleo Photo.</value>
  </data>
  <data name="lblWhyResource1.Text" xml:space="preserve">
    <value>Why we collect information?</value>
  </data>
  <data name="lblWhyResource2.Text" xml:space="preserve">
    <value>We use collected data for the followin purpose : 
&lt;ul&gt;&lt;li&gt;Order tracking&lt;/li&gt;
&lt;li&gt;Promotional offers&lt;/li&gt;
&lt;li&gt;Statistics&lt;/li&gt;
&lt;li&gt;Contact information&lt;/li&gt;
&lt;li&gt;Web site management&lt;/li&gt;&lt;/ul&gt;</value>
  </data>
</root>